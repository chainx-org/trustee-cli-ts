{
    "xgatewaycommon": {
        "boundAddrs": {
            "description": "Get bound addrs for an accountid",
            "params": [
                {
                    "name": "who",
                    "type": "AccountId"
                },
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "BTreeMap<Chain, Vec<String>>"
        },
        "withdrawalLimit": {
            "description": "Get withdrawal limit(minimal_withdrawal&fee) for an AssetId",
            "params": [
                {
                    "name": "asset_id",
                    "type": "AssetId"
                },
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "WithdrawalLimit<RpcBalance<Balance>>"
        },
        "verifyWithdrawal": {
            "description": "Use the params to verify whether the withdrawal apply is valid. Notice those params is same as the params for call `XGatewayCommon::withdraw(...)`, including checking address is valid or something else. Front-end should use this rpc to check params first, than could create the extrinsic.",
            "params": [
                {
                    "name": "asset_id",
                    "type": "AssetId"
                },
                {
                    "name": "value",
                    "type": "u64"
                },
                {
                    "name": "addr",
                    "type": "String"
                },
                {
                    "name": "memo",
                    "type": "String"
                },
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "bool"
        },
        "trusteeMultisigs": {
            "description": "Return the trustee multisig address for all chain.",
            "params": [
                {
                    "name": "at",
                    "type": "Option<BlockHash>)"
                }
            ],
            "type": "BTreeMap<Chain, AccountId>"
        },
        "bitcoinTrusteeProperties": {
            "description": "Return bitcoin trustee registered property info for an account(e.g. registered hot/cold address)",
            "params": [
                {
                    "name": "who",
                    "type": "AccountId"
                },
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "BtcTrusteeIntentionProps"
        },
        "bitcoinTrusteeSessionInfo": {
            "description": "Return bitcoin trustee for current session(e.g. trustee hot/cold address and else)",
            "params": [
                {
                    "name": "session_number",
                    "type": "i32",
                    "isOptional": false
                },
              {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "BtcTrusteeSessionInfo<AccountId, BlockNumber>"
        },
        "bitcoinGenerateTrusteeSessionInfo": {
            "description": "Try to generate bitcoin trustee info for a list of candidates. (this api is used to check the trustee info which would be generated by those candidates)",
            "params": [
                {
                    "name": "candidates",
                    "type": "Vec<AccountId>"
                },
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "BtcTrusteeSessionInfo<AccountId, BlockNumber>"
        }
    },
    "xgatewayrecords": {
        "withdrawalList": {
            "description": "Return current withdraw list(include Applying and Processing withdraw state)",
            "params": [
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "BTreeMap<WithdrawalRecordId, RpcWithdrawalRecord<AccountId, Balance, BlockNumber>>"
        },
        "withdrawalListByChain": {
            "description": "Return current withdraw list for a chain(include Applying and Processing withdraw state)",
            "params": [
                {
                    "name": "chain",
                    "type": "Chain"
                },
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "BTreeMap<WithdrawalRecordId, RpcWithdrawalRecord<AccountId, Balance, BlockNumber>>"
        },
        "pendingWithdrawalListByChain": {
            "description": "Return current pending withdraw list for a chain",
            "params": [
                {
                    "name": "chain",
                    "type": "Chain"
                },
                {
                    "name": "at",
                    "type": "Hash",
                    "isOptional": true
                }
            ],
            "type": "BTreeMap<WithdrawalRecordId, RpcWithdrawalRecord<AccountId, Balance, BlockNumber>>"
        }
    }
}
